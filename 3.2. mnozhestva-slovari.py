#A
#Символическая выжимка
#Во многих промышленных задачах требуется понимать, из каких символов состоят данные. Напишите программу, чтобы по введённой строке она определяла, из каких символов та состоит.
#
#Формат ввода
#Вводится одна строка.
#
#Формат вывода
#Требуется вывести все символы этой строки без повторений.
#Порядок вывода не имеет значения.
#
#Пример 1
#Ввод
#змееед
#Вывод
#здме
#Пример 2
#Ввод
#велосипед
#Вывод
#исолвдеп

s = input()
st = set(s)
si = ''
for i in st:
    si = si + i
print(si)


#B
#Символическая разница
#А ещё в промышленных задачах часто требуется находить общее среди данных, полученных из разных источников. Напишите программу, которая по двум строкам определяет их общие символы.
#
#Формат ввода
#Вводится две строки.
#
#Формат вывода
#Требуется вывести все символы этой строки без повторений.
#Порядок вывода не имеет значения.
#
#Пример 1
#Ввод
#змееед
#велосипед
#Вывод
#ед
#Пример 2
#Ввод
#мама
#папа
#Вывод
#а

s1 = set(input())
s2 = set(input())
si = ''
for i in (s1 & s2):
    si = si + i
print(si)


#C
#Зайка — 8
#Продолжаем считать заек за окном поезда.
#
#Формат ввода
#В первой строке записано натуральное число N — количество выделенных придорожных местностей.
#В каждой из N последующих строк записано описание придорожной местности.
#
#Формат вывода
#Вывести все найденные объекты в придорожных местностях.
#
#Пример 1
#Ввод
#3
#березка елочка зайка волк березка
#сосна зайка сосна елочка зайка медведь
#сосна сосна сосна белочка сосна белочка
#Вывод
#сосна
#березка
#волк
#елочка
#медведь
#белочка
#зайка
#Пример 2
#Ввод
#4
#зайка березка
#березка зайка
#березка елочка березка
#елочка елочка елочка
#Вывод
#березка
#елочка
#зайка

n = int(input())
st = set()
st_temp = set()
for i in range(n):
    k = input().split(' ')
    for j in k:
        st_temp.add(j)
        st = st | st_temp
        st_temp = set()
for i in st:
    print(i)


#D
#Кашееды
#Каждый воспитанник детского сада любит либо манную, либо овсяную, либо обе каши.
#Давайте создадим программу, которая позволит воспитателю быстро выяснить, сколько детей любят обе каши.
#
#Формат ввода
#В первых двух строках указывается количество детей, любящих манную и овсяную каши (N и M). Затем идут N строк — фамилии детей, которые любят манную кашу, и M строк с фамилиями детей, любящих овсяную кашу.
#Гарантируется, что в группе нет однофамильцев.
#
#Формат вывода
#Количество учеников, которые любят обе каши.
#Если таких не окажется, в строке вывода нужно написать «Таких нет».
#
#Пример 1
#Ввод
#3
#2
#Васильев
#Петров
#Васечкин
#Иванов
#Михайлов
#Вывод
#Таких нет
#Пример 2
#Ввод
#3
#3
#Иванов
#Петров
#Васечкин
#Иванов
#Петров
#Васечкин
#Вывод
#3

n = int(input())
m = int(input())
stn = set()
stm = set()
for i in range(n):
    stn.add(input())
for i in range(m):
    stm.add(input())
if len(stn & stm) == 0:
    print("Таких нет")
else:
    print(len(stn & stm))
    

#E
#Кашееды — 2
#Изменим задачу и напишем программу, которая поможет быстро выяснить, сколько детей любят только одну кашу.
#
#Формат ввода
#В первых двух строках указывается количество детей, любящих манную и овсяную каши (N и M).
#Затем идут N+M строк — перемешанные фамилии детей.
#Гарантируется, что в группе нет однофамильцев.
#
#Формат вывода
#Количество учеников, которые любят только одну кашу.
#Если таких не окажется, в строке вывода нужно написать «Таких нет».
#
#Пример 1
#Ввод
#3
#2
#Васильев
#Петров
#Васечкин
#Иванов
#Михайлов
#Вывод
#5
#Пример 2
#Ввод
#3
#3
#Иванов
#Петров
#Васечкин
#Иванов
#Петров
#Васечкин
#Вывод
#Таких нет

n = int(input())
m = int(input())
stn = set()
stm = set()
for i in range(n):
    stn.add(input())
for i in range(m):
    stm.add(input())
if len(stn ^ stm) == 0:
    print("Таких нет")
else:
    print(len(stn ^ stm))


#F
#Кашееды — 3
#Вернёмся к условию, когда каждый воспитанник детского сада любит либо манную, либо овсяную, либо обе эти каши.
#Напишите программу, которая позволит воспитателю узнать, какие дети любят только одну кашу.
#
#Формат ввода
#В первых двух строках указывается количество детей, любящих манную и овсяную каши (N и M).
#Затем идут N+M строк — перемешанные фамилии детей.
#Гарантируется, что в группе нет однофамильцев.
#
#Формат вывода
#В алфавитном порядке фамилии учеников, которые любят только одну кашу.
#Если таких не окажется, в строке вывода нужно написать «Таких нет».
#
#Пример 1
#Ввод
#3
#2
#Васильев
#Петров
#Васечкин
#Иванов
#Михайлов
#Вывод
#Васечкин
#Васильев
#Иванов
#Михайлов
#Петров
#Пример 2
#Ввод
#3
#3
#Иванов
#Петров
#Васечкин
#Иванов
#Петров
#Васечкин
#Вывод
#Таких нет

def sort(k):
    for i in range(0, len(k)):
        for j in range(0, len(k) - 1):
            if k[j] > k[j + 1]:
                k[j], k[j + 1] = k[j + 1], k[j]
    return k


n = int(input())
m = int(input())
stn = set()
stm = set()
for i in range(n):
    stn.add(input())
for i in range(m):
    stm.add(input())
if len(stn ^ stm) == 0:
    print("Таких нет")
else:
    k = []
    for i in (stn ^ stm):
        k.append(i)
    for i in sort(k):
        print(i)


#G
#Азбука Морзе
#Вам дан английский текст. Закодируйте его с помощью азбуки Морзе Каждая буква заменяется на последовательность точек и тире. В качестве тире используйте обычный дефис: -, а в качестве точки — точку .. Например, буква g превратится в трёхсимвольную строку --.. Между закодированными буквами ставится ровно один пробел. Например, слово Help превратится в .... . .-.. .--.. Обратите внимание, что строчные и заглавные буквы кодируются одинаково.
#
#Формат ввода
#Весь текст записан в единственной строке. Текст состоит из английских букв и пробелов, других символов в тексте нет. В тексте не может быть двух или более пробелов подряд.
#
#Формат вывода
#Выведите каждое слово исходного текста, закодированное азбукой Морзе, на отдельной строке.
#Количество строк в ответе должно совпадать с количеством слов в исходном тексте.
#
#Примечание
#Один из вариантов словаря с Азбукой Морзе:
#
#    'A': '.-', 'B': '-...', 'C': '-.-.',
#    'D': '-..', 'E': '.', 'F': '..-.',
#    'G': '--.', 'H': '....', 'I': '..',
#    'J': '.---', 'K': '-.-', 'L': '.-..',
#    'M': '--', 'N': '-.', 'O': '---',
#    'P': '.--.', 'Q': '--.-', 'R': '.-.',
#    'S': '...', 'T': '-', 'U': '..-',
#    'V': '...-', 'W': '.--', 'X': '-..-',
#    'Y': '-.--', 'Z': '--..',
#    '0': '-----', '1': '.----', '2': '..---',
#    '3': '...--', '4': '....-', '5': '.....',
#    '6': '-....', '7': '--...', '8': '---..',
#    '9': '----.'
#Пример 1
#Ввод
#Hello world
#Вывод
#.... . .-.. .-.. ---
#.-- --- .-. .-.. -..
#Пример 2
#Ввод
#Help me SOS
#Вывод
#.... . .-.. .--.
#-- .
#... --- ...

am = {'A': '.-', 'B': '-...', 'C': '-.-.', 'D': '-..', 'E': '.',
      'F': '..-.', 'G': '--.', 'H': '....', 'I': '..', 'J': '.---', 
      'K': '-.-', 'L': '.-..', 'M': '--', 'N': '-.', 'O': '---', 
      'P': '.--.',
      'Q': '--.-', 'R': '.-.', 'S': '...', 'T': '-', 'U': '..-',
      'V': '...-', 'W': '.--', 'X': '-..-', 'Y': '-.--', 'Z': '--..',
      '0': '-----', '1': '.----', '2': '..---', '3': '...--', 
      '4': '....-',
      '5': '.....', '6': '-....', '7': '--...', '8': '---..', 
      '9': '----.'}
s = input()
s = s.upper()
k = s.split(' ')
wordm = ''
for word in k:
    for letter in word:
        wordm = wordm + am[letter] + ' '
    print(wordm)
    wordm = ''


#H
#Кашееды — 4
#Каждый воспитанник детского сада любит одну или несколько каш.
#Поможем воспитателю составить список детей, которые любят конкретную кашу.
#
#Формат ввода
#В первой строке задаётся количество детей в группе (N). В следующих N строках записана фамилия ребенка и список его любимых каш. В последней строке записана каша, информацию о которой хочет получить воспитатель.
#
#Формат вывода
#Фамилии учеников, которые любят заданную кашу, в алфавитном порядке.
#Если таких не окажется, в строке вывода нужно написать «Таких нет».
#
#Пример 1
#Ввод
#5
#Васильев манная
#Петров манная
#Васечкин манная
#Иванов овсяная
#Михайлов овсяная
#манная
#Вывод
#Васечкин
#Васильев
#Петров
#Пример 2
#Ввод
#3
#Иванов манная овсяная
#Петров манная овсяная
#Васечкин манная овсяная
#гречневая
#Вывод
#Таких нет

n = int(input())
k = []
st = []
for i in range(n):
    k.append(input())
kasha = input()
for el in k:
    s = []
    s = el.split(' ')
    if kasha in s:
        st.append(s[0])
stl = list(st)
if len(stl) > 0:
    stl.sort()
    for i in stl:
        print(i)
else:
    print('Таких нет')


#I
#Зайка — 9
#Поможем детям подсчитать, сколько за окном поезда встречается животных и деревьев каждого вида.
#
#Формат ввода
#В каждой строке записано описание придорожной местности.
#Конец ввода обозначается пустой строкой.
#
#Формат вывода
#Список увиденного и их количество.
#Порядок вывода не имеет значения.
#
#Пример 1
#Ввод
#березка елочка зайка волк березка
#сосна зайка сосна елочка зайка медведь
#сосна сосна сосна белочка сосна белочка
#
#Вывод
#березка 2
#елочка 2
#зайка 3
#волк 1
#сосна 6
#медведь 1
#белочка 2
#Пример 2
#Ввод
#зайка березка
#березка зайка
#березка елочка березка
#елочка елочка елочка
#
#Вывод
#зайка 2
#березка 4
#елочка 4

k = []
while (s := input()) != '':
    sk = s.split(' ')
    for i in sk:
        k.append(i)
st = set(k)
for i in st:
    print(i, k.count(i))


#J
#Транслитерация
#Для международных документов русский текст преобразуется с использованием латинского алфавита.
#ГОСТ Р 52535.1-2006 задаёт правила транслитерации идентификационных карт.
#Ниже приведена таблица замен:
#
#А — A
#Б — B
#В — V
#Г — G
#Д — D
#Е — E
#Ё — E
#Ж — ZH
#З — Z
#И — I
#Й — I
#К — K
#Л — L
#М — M
#Н — N
#О — O
#П — P
#Р — R
#С — S
#Т — T
#У — U
#Ф — F
#Х — KH
#Ц — TC
#Ч — CH
#Ш — SH
#Щ — SHCH
#Ы — Y
#Э — E
#Ю — IU
#Я — IA
#Давайте транслитерируем русский текст.
#
#Букву «ё» транслитерируйте как «e», «й» как «и», а «ъ» и «ь» (и их заглавные версии «Ъ» и «Ь») должны исчезнуть из текста. Строчные буквы заменяются на строчные, заглавные заменяются на заглавные. Если заглавная буква превращается при транслитерации в несколько букв, то заглавной должна остаться только первая из них (например, «Ц» → «Tc»). Все некириллические символы должны остаться на месте.
#
#Формат ввода
#В единственной строке задан русский текст. Текст может состоять из любых символов. Вам необходимо транслитерировать только русские буквы, а остальные оставить на месте. Гарантируется, что нет слов, состоящих только из букв «ъ» и «ь».
#
#Формат вывода
#Выведите одну строку — транслитерированный текст.
#
#Пример 1
#Ввод
#Привет, мир!
#Вывод
#Privet, mir!
#Пример 2
#Ввод
#Я помню чудное мгновенье: Передо мной явилась ты, Как мимолетное виденье, Как гений чистой красоты.
#Вывод
#Ia pomniu chudnoe mgnovene: Peredo mnoi iavilas ty, Kak mimoletnoe videne, Kak genii chistoi krasoty.

tl = {'А': 'A',
      'Б': 'B',
      'В': 'V',
      'Г': 'G',
      'Д': 'D',
      'Е': 'E',
      'Ё': 'E',
      'Ж': 'ZH',
      'З': 'Z',
      'И': 'I',
      'Й': 'I',
      'К': 'K',
      'Л': 'L',
      'М': 'M',
      'Н': 'N',
      'О': 'O',
      'П': 'P',
      'Р': 'R',
      'С': 'S',
      'Т': 'T',
      'У': 'U',
      'Ф': 'F',
      'Х': 'KH',
      'Ц': 'TC',
      'Ч': 'CH',
      'Ш': 'SH',
      'Щ': 'SHCH',
      'Ъ': '',
      'Ы': 'Y',
      'Ь': '',
      'Э': 'E',
      'Ю': 'IU',
      'Я': 'IA'}
    
s = input()
si = ''
for i in s:
    if tl.get(i.upper(), 1) != 1:
        if i.islower():
            si = si + tl.get(i.upper(), 1).lower()
        else:
            si = si + tl.get(i, 1).capitalize()
    else:
        si = si + i
print(si)


#K
#Однофамильцы
#Начальник кадровой службы хочет выяснить, сколько мужчин-однофамильцев работает в организации. У него есть список фамилий, и на основании этого списка нужно вычислить количество фамилий, которые совпадают с другими.
#
#Формат ввода
#В первой строке указывается количество мужчин — сотрудников организации (N).
#Затем идут N строк с фамилиями этих сотрудников в произвольном порядке.
#
#Формат вывода
#Количество однофамильцев в организации.
#
#Пример 1
#Ввод
#6
#Иванов
#Петров
#Сидоров
#Петров
#Иванов
#Петров
#Вывод
#5
#Пример 2
#Ввод
#3
#Иванов
#Петров
#Сидоров
#Вывод
#0

n = int(input())
k = []
d = dict()
sum = 0
for i in range(n):
    k.append(input())
st = set(k)
for i in st:
    d[i] = k.count(i)
for i in d:
    if d[i] > 1:
        sum = sum + d[i]
print(sum)


#L
#Однофамильцы — 2
#Вновь поможем сотруднику из отдела кадров выяснить, сколько мужчин-однофамильцев работает в организации, но уже немного с иными условиями.
#
#Формат ввода
#В первой строке указывается количество мужчин — сотрудников организации (N).
#Затем идут N строк с фамилиями этих сотрудников в произвольном порядке.
#
#Формат вывода
#Список однофамильцев в организации с указанием их количества в алфавитном порядке.
#Если таковых нет — вывести «Однофамильцев нет».
#
#Пример 1
#Ввод
#6
#Иванов
#Петров
#Сидоров
#Петров
#Иванов
#Петров
#Вывод
#Иванов - 2
#Петров - 3
#Пример 2
#Ввод
#3
#Иванов
#Петров
#Сидоров
#Вывод
#Однофамильцев нет

n = int(input())
k = []
d = dict()
sum = 0
for i in range(n):
    k.append(input())
st = set(k)
for i in st:
    d[i] = k.count(i)
k = []
for i in d:
    if d[i] > 1:
        k.append((i, d[i]))
k.sort()
if len(k) == 0:
    print('Однофамильцев нет')
else:
    for i in k:
        print(i[0], '-', i[1])


#M
#Дайте чего-нибудь новенького!
#Главный повар детского сада хочет приготовить в праздничный день блюда, которые ни разу не готовил на этой неделе.
#В его распоряжении есть список блюд:
#
#которые можно приготовить в столовой сегодня;
#которые были приготовлены в каждый из дней недели.
#Формат ввода
#Число блюд (N), которые можно приготовить в столовой. N строк с названиями блюд. Число дней (M), о которых имеется информация. M блоков строк для каждого из списков. В первой строке каждого блока записано число блюд в заданный день, затем перечисляются эти блюда.
#
#Формат вывода
#Список блюд, которые ещё не готовились на этой неделе в алфавитном порядке.
#Если все возможные блюда уже были приготовлены, следует вывести «Готовить нечего».
#
#Пример
#Ввод
#5
#Овсянка
#Рис
#Суп
#Манная каша
#Рыба
#2
#3
#Рис
#Суп
#Рыба
#2
#Рис
#Рыба
#Вывод
#Манная каша
#Овсянка

n = int(input())
alldishes = set()
olddishes = set()
for i in range(n):
    alldishes.add(input())
m = int(input())
for i in range(m):
    cntdishesinday = int(input())
    for j in range(cntdishesinday):
        olddishes.add(input())
dishes = alldishes - olddishes
k = list(dishes)
if len(k) > 0:
    k.sort
    for i in k:
        print(i)
else:
    print('Готовить нечего')


#N
#Это будет шедевр!
#Главный повар детского сада хочет быстрее выбирать блюда для готовки.
#В его распоряжении есть список продуктов, а также набор блюд.
#
#Напишите программу, способную быстро определить блюда, которые можно приготовить.
#
#Формат ввода
#Число продуктов (N), которые имеются в наличии.
#N строк с названиями продуктов.
#Число рецептов (M), о которых имеется информация.
#M блоков строк для каждого из рецептов.
#В первой строке каждого блока записано название блюда.
#Во второй — число ингредиентов.
#Затем перечисляются сами ингредиенты, требуемые для приготовления блюда.
#
#Формат вывода
#Список блюд, которые можно приготовить в алфавитном порядке.
#Если ни одно из блюд нельзя приготовить, следует вывести «Готовить нечего».
#
#Пример 1
#Ввод
#4
#Яблоки
#Хлеб
#Варенье
#Картошка
#3
#Тосты
#2
#Хлеб
#Варенье
#Яблочный Сок
#1
#Яблоки
#Яичница
#1
#Яйца
#Вывод
#Тосты
#Яблочный Сок
#Пример 2
#Ввод
#1
#хлеб
#1
#бутерброд
#2
#масло
#хлеб
#Вывод
#Готовить нечего

n = int(input())
products = set()
receipts = dict()
for i in range(n):
    products.add(input())
m = int(input())
for i in range(m):
    dishname = input()
    cntingr = int(input())
    receipt = set()
    for j in range(cntingr):
        receipt.add(input())
    receipts[dishname] = receipt
f = 0
for i in receipts:
    if receipts[i] <= products:
        print(i)
        f = f + 1
if f == 0:
    print('Готовить нечего')


#O
#Двоичная статистика!
#У программистов особые отношения с двоичной системой счисления.
#Продолжим тренировки в статистической обработке данных и проанализируем данные числа.
#Напишите программу, которая для переданных чисел вычисляет:
#
#количество разрядов;
#количество единиц;
#количество нулей.
#Формат ввода
#Вводится последовательность чисел, записанных через пробел.
#
#Формат вывода
#Вывести список словарей с требуемой статистикой.
#
#Примечание
#Вывод в примерах отформатирован только для визуальной наглядности.
#Все пробельные символы при проверке игнорируются.
#Порядок словарей обязан совпадать с порядком переданных чисел.
#Порядок ключей в словаре не имеет значения.
#
#Пример 1
#Ввод
#5 8 12
#Вывод
#[
#    {
#        "digits": 3,
#        "units": 2,
#        "zeros": 1
#    },
#    {
#        "digits": 4,
#        "units": 1,
#        "zeros": 3
#    },
#    {
#        "digits": 4,
#        "units": 2,
#        "zeros": 2
#    }
#]
#Пример 2
#Ввод
#13 2 7
#Вывод
#[
#    {
#        "digits": 4,
#        "units": 3,
#        "zeros": 1
#    },
#    {
#        "digits": 2,
#        "units": 1,
#        "zeros": 1
#    },
#    {
#        "digits": 3,
#        "units": 3,
#        "zeros": 0
#    }
#]

def bn(n):
    b = ''
    while n > 0:
        b = str(n % 2) + b
        n = n // 2
    return b


def rez(str):
    ls = dict()
    ls['digits'] = len(str)
    ls['units'] = str.count('1')
    ls['zeros'] = str.count('0')
    return ls


s = input()
sl = s.split()
k = []
for i in sl:
    k.append(rez(bn(int(i))))
print(k)


#P
#Зайка — 10
#Поможем детям разобраться, что именно они увидели рядом с зайками.
#
#Формат ввода
#В каждой строке записано описание придорожной местности.
#Конец ввода обозначается пустой строкой.
#
#Формат вывода
#Определите список увиденного рядом с зайками без повторений.
#Порядок вывода не имеет значения.
#
#Примечание
#Считается, что объект находится рядом, если он записан справа или слева от требуемого.
#
#Пример 1
#Ввод
#березка елочка зайка волк березка
#сосна зайка сосна елочка зайка медведь
#сосна сосна сосна белочка сосна белочка
#
#Вывод
#волк
#елочка
#медведь
#сосна
#Пример 2
#Ввод
#зайка березка
#березка зайка
#березка елочка березка
#елочка елочка елочка
#
#Вывод
#березка

obj = set()
while (s := input()) != '':
    ls = s.split()
    while 'зайка' in ls:
        if ls.index('зайка') > 0:
            obj.add(ls[ls.index('зайка') - 1])
        if ls.index('зайка') < len(ls) - 1:
            obj.add(ls[ls.index('зайка') + 1])
        del ls[ls.index('зайка')]
for i in obj:
    print(i)



#Q
#Друзья друзей
#Теория шести рукопожатий — социологическая теория, согласно которой любые два человека на Земле разделены не более, чем пятью уровнями общих знакомых (и, соответственно, шестью уровнями связей). Формальная математическая формулировка теории: диаметр графа знакомств не превышает 6. Мы не станем так сильно углубляться в дружественные связи и пока нам хватит только двух уровней. Напишите программу, которая по списку дружественных пар для каждого человека определяет список «друзей 2-го уровня».
#
#Формат ввода
#В каждой строке записывается два имени.
#Окончанием ввода служит пустая строка.
#
#Формат вывода
#Выведите список всех людей и их «друзей 2-го уровня» в формате «Человек: Друг1, Друг2, ...».
#Список людей и друзей в каждой строке требуется вывести в алфавитном порядке без повторений.
#
#Пример 1
#Ввод
#Иванов Петров
#Иванов Сергеев
#Васильев Петров
#Сергеев Яковлев
#Петров Кириллов
#Петров Яковлев
#
#Вывод
#Васильев: Иванов, Кириллов, Яковлев
#Иванов: Васильев, Кириллов, Яковлев
#Кириллов: Васильев, Иванов, Яковлев
#Петров: Сергеев
#Сергеев: Петров
#Яковлев: Васильев, Иванов, Кириллов
#Пример 2
#Ввод
#Николай Фёдор
#Николай Женя
#Фёдор Женя
#Фёдор Илья
#Илья Фёдор
#
#Вывод
#Женя: Илья
#Илья: Женя, Николай
#Николай: Илья
#Фёдор: 

fr = dict()
fr2 = dict()
men_list = []
while (s := input()) != '':
    ls = s.split()
    for i in range(len(ls)):
        if ls[i] not in fr:
            fr_one = set()
        else:
            fr_one = fr[ls[i]]
        fr_one.add(ls[len(ls) - 1 - i])
        fr[ls[i]] = fr_one
for i in fr:
    men_list.append(i)
    fr2_one = set()
    for j in fr[i]:
        fr2_one = fr2_one | fr[j]
    fr2_one = fr2_one - {i} - fr[i]
    fr2[i] = fr2_one
men_list.sort()
for i in men_list:
    f2list = list(fr2[i])
    f2list.sort()
    s = ''
    for j in f2list:
        s = s + j + ', '
    print(i + ':', s[:-2])


#R
#Карта сокровищ
#На пиратской карте отмечено N точек, в которых зарыты сокровища. Каждая точка задана координатами (xi, yi). Координаты указаны в километрах. Команда Капитана Крюка хочет составить маршрут, чтобы собрать как можно больше кладов. Однако есть ограничение: для любых двух соседних точек маршрута 
#(xi, yi) и (xj, yj) координаты xi и xj могут различаться только последней цифрой, как и координаты yi и yj тоже могут различаться только последней цифрой. Например, после точки (15, 10) они могут отправиться в точку (18, 16), а вот из точки (14, 68) в точку (19, 71) пройти уже не получится, 
#ведь 68 и 71 различаются не только последней цифрой. Из точки (5, 12) в точку (13, 14) попасть тоже нельзя, так как числа 5 и 13 отличаются в разряде десятков. По заданным координатам определите, какое максимальное количество точек сможет добавить в свой маршрут Капитан Крюк.
#
#Формат ввода
#В первой строке указано число N (1<=N<=10^5) — количество точек, отмеченных на карте сокровищ. В следующих N строках содержатся пары координат: 
#xi и yi — координаты i-ой точки. Координаты — целые числа не меньше нуля и не больше 10^9. Гарантируется, что совпадающих точек в списке нет.
#
#Формат вывода
#Выведите одно число — максимальное количество точек, которое Капитан Крюк сможет посетить по маршруту, построенному по описанным правилам.
#
#Пример 1
#Ввод
#9
#10 18
#17 15
#25 21
#0 21
#1 16
#25 29
#24 24
#8 26
#10 20
#Вывод
#3
#Пример 2
#Ввод
#3
#12 113
#114 15
#16 117
#Вывод
#2

n = int(input())
k = []
m = 0
for i in range(n):
    koor_str = input().split()
    k.append((int(koor_str[0]) // 10, int(koor_str[1]) // 10,))
st = set(k)
for i in st:
    if k.count(i) > m:
        m = k.count(i)
print(m)


#S
#Частная собственность
#Ребята приносят игрушки в детский сад и играют все вместе.
#Сегодня они решили выяснить, игрушки какого типа принадлежат только одному из детей. Напишите программу, которая по списку детей и их игрушек определит «частную собственность».
#
#Формат ввода
#В первой строке задается количество детей в группе (N).
#В каждой из следующих N строк записано имя ребенка и его игрушки в формате:
#Имя: игрушка1, игрушка2, ....
#
#Формат вывода
#Список игрушек, которые есть только у одного из детей в алфавитном порядке.
#
#Пример
#Ввод
#3
#Аня: кукла, машинка, кукла, домик
#Боря: машинка, зайчик
#Вова: кубики, машинка
#Вывод
#домик
#зайчик
#кубики
#кукла

n = int(input())
k = []
for i in range(n):
    s = input()
    s = s[(s.index(':') + 2):]
    st = set(s.split(', '))
    for j in st:
        k.append(j)
s = set(k)
k_unique = []
for i in s:
    if k.count(i) == 1:
        k_unique.append(i)
k_unique.sort()
for i in k_unique:
    print(i)


#T
#Простая задача 4.0
#Напомним, что взаимно простыми называются числа, которые не имеют общих делителей кроме 1. Напишите программу, которая для каждого переданного числа находит список его взаимно простых.
#
#Формат ввода
#Задана последовательность чисел записанных через точку с запятой (;) и пробел.
#
#Формат вывода
#Список чисел с указанием взаимно простых ему среди переданных.
#Все числа должны быть выведены в порядке возрастания без повторений.
#Строки следует отформатировать по правилу:
#число - взаимно простое 1, взаимно простое 2, ...
#Если для числа не было найдено ни одного взаимно простого, то и выводить его не требуется.
#
#Пример 1
#Ввод
#2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20
#Вывод
#2 - 3, 5, 7, 9, 11, 13, 15, 17, 19
#3 - 2, 4, 5, 7, 8, 10, 11, 13, 14, 16, 17, 19, 20
#4 - 3, 5, 7, 9, 11, 13, 15, 17, 19
#5 - 2, 3, 4, 6, 7, 8, 9, 11, 12, 13, 14, 16, 17, 18, 19
#6 - 5, 7, 11, 13, 17, 19
#7 - 2, 3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20
#8 - 3, 5, 7, 9, 11, 13, 15, 17, 19
#9 - 2, 4, 5, 7, 8, 10, 11, 13, 14, 16, 17, 19, 20
#10 - 3, 7, 9, 11, 13, 17, 19
#11 - 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20
#12 - 5, 7, 11, 13, 17, 19
#13 - 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20
#14 - 3, 5, 9, 11, 13, 15, 17, 19
#15 - 2, 4, 7, 8, 11, 13, 14, 16, 17, 19
#16 - 3, 5, 7, 9, 11, 13, 15, 17, 19
#17 - 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20
#18 - 5, 7, 11, 13, 17, 19
#19 - 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20
#20 - 3, 7, 9, 11, 13, 17, 19
#Пример 2
#Ввод
#7; 2; 2; 12; 14; 7; 2; 49
#Вывод
#2 - 7, 49
#7 - 2, 12
#12 - 7, 49
#49 - 2, 12

def simple(x, y):
    if x > y:
        mn = y
    else:
        mn = x
    k = 0
    for i in range(1, mn + 1):
        if x % i == 0 and y % i == 0:
            k = k + 1
    if k == 1:
        return True
    else:
        return False


s = input()
k1 = set(s.split('; '))
k1 = list(k1)
k = []
for i in k1:
    k.append(int(i))
k.sort()
for i in k:
    sr = ''
    for j in range(len(k)):
        if i != k[j]:
            if simple(i, k[j]):
                sr = sr + str(k[j]) + ', '
    if sr != '':
        print(i, '-', sr[:-2])